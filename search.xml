<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Go语言时间解析Json/Gorm框架解析]]></title>
    <url>%2F2019%2F04%2F20%2FGo%E8%AF%AD%E8%A8%80%E6%97%B6%E9%97%B4%E8%A7%A3%E6%9E%90Json-Gorm%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[用处 在对结构体进行编/解码的时候将国际时间转换成国内标准时间文本格式 在使用Gorm框架写入数据库的时候将 JSONTime解析成 time.Time 读取时将time.Time解析成JSONTime格式 接口何时会调用 UnmarshalJSON() &lt;- json.Unmarshal 解析到结构体 MarshalJSON() &lt;- json.Marshal 解析结构体到json Value() &lt;- gorm执行creat等创建操作 Scan() &lt;- gorm执行 find/first等查询操作 代码1 数据库字段为 timestamp 这里使用结构体的好处的可以拥有time.Time的方法 但不是必须的 12345678910111213141516171819202122232425262728293031323334353637const ( TimeFormat = "2006-01-02 15:04:05")type JSONTime struct &#123; time.Time&#125;func (t *JSONTime) UnmarshalJSON(data []byte) (err error) &#123; now, err := time.ParseInLocation(`"`+TimeFormat+`"`, string(data), time.Local) *t = JSONTime&#123; now, &#125; return&#125;func (t JSONTime) MarshalJSON() ([]byte, error) &#123; formatted := fmt.Sprintf("\"%s\"", t.Format(TimeFormat)) return []byte(formatted), nil&#125;func (t JSONTime) Value() (driver.Value, error) &#123; var zeroTime time.Time if t.Time.UnixNano() == zeroTime.UnixNano() &#123; return nil, nil &#125; return t.Time, nil&#125;func (t *JSONTime) Scan(v interface&#123;&#125;) error &#123; value, ok := v.(time.Time) if ok &#123; *t = JSONTime&#123;Time: value&#125; return nil &#125; return fmt.Errorf("can not convert %v to timestamp", v)&#125; 代码2 字段是整形时间戳 如:1498621052 1234567891011121314151617181920const ( TimeFormat = "2006-01-02 15:04:05" DayFormat = "2006-01-02")type TstampTime int64func (t *TstampTime) UnmarshalJSON(data []byte) (err error) &#123; time.ParseInLocation(`"`+TimeFormat+`"`, string(data), time.Local) return&#125;func (t TstampTime) MarshalJSON() ([]byte, error) &#123; tint := int64(t) if tint == 0 &#123; return []byte(`""`), nil &#125; tf := time.Unix(tint, 0).Format(`"` + TimeFormat + `"`) return []byte(tf), nil&#125;]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>gorm</tag>
        <tag>time.Time</tag>
      </tags>
  </entry>
</search>
