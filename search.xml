<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go语言时间解析Json/Gorm框架解析</title>
      <link href="/2019/04/20/Go%E8%AF%AD%E8%A8%80%E6%97%B6%E9%97%B4%E8%A7%A3%E6%9E%90Json-Gorm%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/04/20/Go%E8%AF%AD%E8%A8%80%E6%97%B6%E9%97%B4%E8%A7%A3%E6%9E%90Json-Gorm%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><ul><li><h3 id="在对结构体进行编-解码的时候将国际时间转换成国内标准时间文本格式"><a href="#在对结构体进行编-解码的时候将国际时间转换成国内标准时间文本格式" class="headerlink" title="在对结构体进行编/解码的时候将国际时间转换成国内标准时间文本格式"></a>在对结构体进行编/解码的时候将国际时间转换成国内标准时间文本格式</h3></li><li><h3 id="在使用Gorm框架写入数据库的时候将-JSONTime解析成-time-Time-读取时将time-Time解析成JSONTime格式"><a href="#在使用Gorm框架写入数据库的时候将-JSONTime解析成-time-Time-读取时将time-Time解析成JSONTime格式" class="headerlink" title="在使用Gorm框架写入数据库的时候将 JSONTime解析成 time.Time 读取时将time.Time解析成JSONTime格式"></a>在使用Gorm框架写入数据库的时候将 JSONTime解析成 time.Time 读取时将time.Time解析成JSONTime格式</h3></li></ul><hr><h2 id="接口何时会调用"><a href="#接口何时会调用" class="headerlink" title="接口何时会调用"></a>接口何时会调用</h2><ul><li><h3 id="UnmarshalJSON-lt-json-Unmarshal-解析到结构体"><a href="#UnmarshalJSON-lt-json-Unmarshal-解析到结构体" class="headerlink" title="UnmarshalJSON() &lt;- json.Unmarshal 解析到结构体"></a>UnmarshalJSON() &lt;- json.Unmarshal 解析到结构体</h3></li><li><h3 id="MarshalJSON-lt-json-Marshal-解析结构体到json"><a href="#MarshalJSON-lt-json-Marshal-解析结构体到json" class="headerlink" title="MarshalJSON() &lt;- json.Marshal 解析结构体到json"></a>MarshalJSON() &lt;- json.Marshal 解析结构体到json</h3></li><li><h3 id="Value-lt-gorm执行creat等创建操作"><a href="#Value-lt-gorm执行creat等创建操作" class="headerlink" title="Value() &lt;- gorm执行creat等创建操作"></a>Value() &lt;- gorm执行creat等创建操作</h3></li><li><h3 id="Scan-lt-gorm执行-find-first等查询操作"><a href="#Scan-lt-gorm执行-find-first等查询操作" class="headerlink" title="Scan() &lt;-  gorm执行 find/first等查询操作"></a>Scan() &lt;-  gorm执行 find/first等查询操作</h3></li></ul><hr><h2 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h2><ul><li><h3 id="数据库字段为-timestamp"><a href="#数据库字段为-timestamp" class="headerlink" title="数据库字段为 timestamp"></a>数据库字段为 timestamp</h3></li><li><h3 id="这里使用结构体的好处的可以拥有time-Time的方法-但不是必须的"><a href="#这里使用结构体的好处的可以拥有time-Time的方法-但不是必须的" class="headerlink" title="这里使用结构体的好处的可以拥有time.Time的方法 但不是必须的"></a>这里使用结构体的好处的可以拥有time.Time的方法 但不是必须的</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">TimeFormat = <span class="string">"2006-01-02 15:04:05"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> JSONTime struct &#123;</span><br><span class="line">time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (t *JSONTime) UnmarshalJSON(data []byte) (err error) &#123;</span><br><span class="line">now, err := time.ParseInLocation(`<span class="string">"`+TimeFormat+`"</span>`, string(data), time.Local)</span><br><span class="line">*t = JSONTime&#123;</span><br><span class="line">now,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (t JSONTime) MarshalJSON() ([]byte, error) &#123;</span><br><span class="line">formatted := fmt.Sprintf(<span class="string">"\"%s\""</span>, t.Format(TimeFormat))</span><br><span class="line"><span class="built_in">return</span> []byte(formatted), nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (t JSONTime) Value() (driver.Value, error) &#123;</span><br><span class="line">var zeroTime time.Time</span><br><span class="line"><span class="keyword">if</span> t.Time.UnixNano() == zeroTime.<span class="function"><span class="title">UnixNano</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> nil, nil</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> t.Time, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (t *JSONTime) Scan(v interface&#123;&#125;) error &#123;</span><br><span class="line">value, ok := v.(time.Time)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">*t = JSONTime&#123;Time: value&#125;</span><br><span class="line"><span class="built_in">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> fmt.Errorf(<span class="string">"can not convert %v to timestamp"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h2><ul><li><h3 id="字段是整形时间戳-如-1498621052"><a href="#字段是整形时间戳-如-1498621052" class="headerlink" title="字段是整形时间戳 如:1498621052"></a>字段是整形时间戳 如:1498621052</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">TimeFormat = <span class="string">"2006-01-02 15:04:05"</span></span><br><span class="line">DayFormat  = <span class="string">"2006-01-02"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> TstampTime int64</span><br><span class="line"></span><br><span class="line">func (t *TstampTime) UnmarshalJSON(data []byte) (err error) &#123;</span><br><span class="line">    time.ParseInLocation(`<span class="string">"`+TimeFormat+`"</span>`, string(data), time.Local)</span><br><span class="line"><span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (t TstampTime) MarshalJSON() ([]byte, error) &#123;</span><br><span class="line">tint := int64(t)</span><br><span class="line"><span class="keyword">if</span> tint == 0 &#123;</span><br><span class="line"><span class="built_in">return</span> []byte(`<span class="string">""</span>`), nil</span><br><span class="line">&#125;</span><br><span class="line">tf := time.Unix(tint, 0).Format(`<span class="string">"` + TimeFormat + `"</span>`)</span><br><span class="line"><span class="built_in">return</span> []byte(tf), nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码1测试"><a href="#代码1测试" class="headerlink" title="代码1测试"></a>代码1测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="built_in">type</span> t struct &#123;</span><br><span class="line">Tm JSONTime `json:<span class="string">"tm"</span>` //注意大写才能导出</span><br><span class="line">&#125;</span><br><span class="line">t2 := new(t)</span><br><span class="line">standardTime := time.Now() //默认时间格式</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"系统默认的时间格式: %s \n"</span>, standardTime)</span><br><span class="line"></span><br><span class="line">t2.Tm = JSONTime&#123;standardTime&#125;</span><br><span class="line">bt, err := json.Marshal(t2)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line">normalTime := string(bt) //常用显示</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"转成常用时间格式: %s \n"</span>, normalTime)</span><br><span class="line"></span><br><span class="line">err = json.Unmarshal([]byte(normalTime), t2)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"转换成系统默认格式: %s \n"</span>, t2.Tm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出<br>系统默认的时间格式: 2019-04-20 20:30:05.44986 +0800 CST m=+0.000219042<br>转成常用时间格式: {“tm”:”2019-04-20 20:30:05”}<br>转换成系统默认格式: 2019-04-20 20:30:05 +0800 CST </li></ul><h2 id="代码2测试"><a href="#代码2测试" class="headerlink" title="代码2测试"></a>代码2测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> t struct &#123;</span><br><span class="line">    Tm TstampTime</span><br><span class="line">&#125;</span><br><span class="line">t2 := &amp;t&#123;</span><br><span class="line">    Tm: 1498621052,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"原始时间戳: %d \n"</span>, t2.Tm)</span><br><span class="line"></span><br><span class="line">bt, err := json.Marshal(t2)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line">normalTime := string(bt) //常用显示</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"转成常用时间格式: %s \n"</span>, normalTime)</span><br><span class="line"></span><br><span class="line">err = json.Unmarshal([]byte(normalTime), t2)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"转换成时间戳格式: %d \n"</span>, t2.Tm)</span><br></pre></td></tr></table></figure><ul><li>输出<br>  原始时间戳: 1498621052<br>  转成常用时间格式: {“Tm”:”2017-06-28 11:37:32”}<br>  转换成时间戳格式: 1498621052 </li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gorm </tag>
            
            <tag> time.Time </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
